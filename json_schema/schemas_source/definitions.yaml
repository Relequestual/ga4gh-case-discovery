---
"$id": http://ga4gh.org/schemas/discovery/search/definitions
"$schema": http://json-schema.org/draft-07/schema#
definitions:
  semver:
    description: The version of a component which conforms to Semantic Versioning
    type: string
    pattern: ^((0|[1-9][0-9]*)\.){2}(0|[1-9][0-9]*){1}(-([0-9A-Za-z-]+\.?)+)*(\+([0-9A-Za-z-]+-?\.?)+)*$
    examples:
    - 0.1.0
    - 1.0.0
    "$comment": |
      This regex is based on semver github issue https://github.com/semver/semver.org/issues/59#issuecomment-391070396 which was tests at https://regex101.com/r/E0iVVS/2
      See the tests of this regex using regex101 at https://regex101.com/r/VOHwch/2
  semver-xrange:
    type: string
    description: |
      Specifies the version number required by the request.
      This must be in the form of "X-Ranges" as specified by https://docs.npmjs.com/misc/semver#x-ranges-12x-1x-12-
    pattern: ^([0-9xX*]+(\.|$)){0,2}([0-9xX*]+){1}$
    "$comment": |
      X-Ranges are the simplest format for defining a version range when using SemVer, and allow specifying specific
      versions in the full form of MAJOR.MINOR.PATCH.

       For specifying a range, an example X-Range of `"1"` has the following equalities: 1 := 1.x.x := >=1.0.0 <2.0.0.

      This definition could be later expanded to include other forms of npm defined version ranges, but it should not be
      expanded without clear use case requirements. The barrier to entry should be kept low.

      The official npm node package `semver` provides functionality for checking if a version satisifies a given range.
      Try out SemVer range matches at https://semver.npmjs.com
      Regex testable at https://regex101.com/r/BdoHK8/1
    examples:
    - "1"
    - "1.2"
    - "1.3.2"
    - "1.x.x"
    - "1.2.x"
    - "2.1.X"
    - "2.1.*"